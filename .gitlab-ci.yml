stages:
  - env
  - package
  - deploy
  - clean_up

variables:
  ENV_FILE: .env.local

.env-common:
  stage: env
  tags:
  - portal-1
  script:
    - >
      echo -e "
      export DOMAIN=$DOMAIN\n
      export SUBDOMAIN=$SUBDOMAIN\n
      export NODE_ENV=$NODE_ENV\n
      export CUSTOM_CONTAINER_NAME=$CUSTOM_CONTAINER_NAME\n
      export COMPOSE_PROJECT_NAME=${CUSTOM_CONTAINER_NAME}-${DOMAIN//./-}\n
      " > .env.local
  artifacts:
    paths:
      - $ENV_FILE
  rules:
    - when: never

# env-staging:
#   stage: env
#   extends: .env-common
#   before_script:
#     - CUSTOM_CONTAINER_NAME=staging-landing
#     - SUBDOMAIN=${CUSTOM_CONTAINER_NAME}.
#     - NODE_ENV=production
#     - cat $ENV_STAGING >> .env.local | true
#   rules:
#     - if: $CI_COMMIT_BRANCH == "staging"

env-production:
  stage: env
  extends: .env-common
  before_script:
    - CUSTOM_CONTAINER_NAME=landing
    - NODE_ENV=production
    - cat $ENV_PRODUCTION >> .env.local | true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

package:
  stage: package
  image: docker/compose
  tags:
    - portal-1
  before_script:
    - source $ENV_FILE
    - docker info
    - docker-compose version
    - docker-compose config
  script:
    - docker-compose pull
    - docker-compose build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success

deploy:
  stage: deploy
  image: docker/compose
  tags:
    - portal-1
  before_script:
    - source $ENV_FILE
    - docker-compose ps
    - docker-compose version
  script:
    - docker-compose up -d
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success

clean_up:
  stage: clean_up
  tags:
    - portal-1
  script:
    - rm -rf node_modules
  when: on_failure
